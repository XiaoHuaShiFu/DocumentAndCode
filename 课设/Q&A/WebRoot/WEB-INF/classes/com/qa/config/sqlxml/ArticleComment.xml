<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="ArticleComment">
	
	<!-- 文章评论对象 -->
	<resultMap type="com.qa.bean.ArticleComment" id="ArticleCommentResult">
		<id column="id" jdbcType="INTEGER" property="id" />
		<result column="article_id" jdbcType="INTEGER" property="articleId" />
		<result column="respondent_id" jdbcType="INTEGER" property="respondentId" />
		<result column="content" jdbcType="VARCHAR" property="content" />
		<result column="date" jdbcType="TIMESTAMP" property="date"/>
		<result column="likes" jdbcType="INTEGER" property="like"/>
	</resultMap>
	
	<!-- 通过article_id查询文章评论列表 
		param:com.qa.bean.ArticleCommentKeyword
		return:List<ArticleCommentResult>
	-->
	<select id="queryArticleCommentList" parameterType="com.qa.bean.ArticleCommentKeyword" resultMap="ArticleCommentResult">
		SELECT id, article_id, respondent_id, content, date, likes 
		FROM article_comment WHERE article_id = #{articleId} 
		LIMIT #{from},#{to}
	</select> 
	
	<!-- 通过article_id查询文章评论 
		param:int
		return:ArticleCommentResult
	-->
	<select id="queryOne" parameterType="int" resultMap="ArticleCommentResult">
		SELECT id, article_id, respondent_id, content, date, likes 
		FROM article_comment WHERE id = #{_parameter}
	</select> 
	
	<!-- 写入一条评论，第一次写入的时候使用
		param:com.qa.bean.ArticleComment
	 -->
	<insert id="insertArticleComment" useGeneratedKeys="true" keyProperty="id" parameterType="com.qa.bean.ArticleComment">
		INSERT INTO article_comment(article_id, respondent_id, content, date, likes) 
		VALUES(#{articleId}, #{respondentId}, #{content}, now(), 0)
	</insert>
	
	<!-- 通过id删除一条文章评论
		param:int
	 -->
	<delete id="deleteArticleComment" parameterType="int">
		DELETE FROM article_comment WHERE id = #{_parameter}
	</delete>
	
	<!-- 更新一条评论
		param:com.qa.bean.ArticleComment
	 -->
	<update id="updateArticleComment" parameterType="com.qa.bean.ArticleComment">
		UPDATE article_comment
		<!-- 设置set属性 自动添加删除前后缀 -->
		<set>
			<if test="content != null">
				content = #{content},
			</if>
			<if test="like != 0">
				likes = #{like},
			</if>
		</set>
		WHERE id = #{id}
	</update>
	
</mapper>